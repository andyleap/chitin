// This file is automatically generated, DO NOT EDIT

package person

import (
	"encoding/binary"
	"io"
	"reflect"
	"unsafe"

	"chitin.io/chitin"
	"github.com/dchest/varuint"
)

// use all packages to avoid errors
var (
	_ = io.ErrUnexpectedEOF
	_ reflect.StringHeader
	_ unsafe.Pointer
	_ = varuint.Uint64
)

func NewPersonV1View(data []byte) (*PersonV1View, error) {
	if len(data) < minLenPersonV1View {
		return nil, chitin.ErrWrongSize
	}
	view := &PersonV1View{
		data: data,
	}
	return view, nil
}

const (
	slotsLenPersonV1View  = 4
	numFieldsPersonV1View = 0
	minLenPersonV1View    = slotsLenPersonV1View + 1*numFieldsPersonV1View
)

type PersonV1View struct {
	data []byte
}

func (v *PersonV1View) Age() uint16 {
	data := v.data[0:2]
	return binary.BigEndian.Uint16(data)
}

func (v *PersonV1View) Siblings() uint16 {
	data := v.data[2:4]
	return binary.BigEndian.Uint16(data)
}
