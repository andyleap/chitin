package schema

import (
	"strings"
	"text/template"
)

//go:generate -command asset go run ../admin/asset.go
//go:generate asset codegen.tmpl

var genFuncMap = template.FuncMap{

	"ucFirst": func(s string) string {
		if s == "" {
			return s
		}
		return strings.ToUpper(s[:1]) + s[1:]
	},

	"slotOffsets": func(slots []Slot) []offset {
		r := make([]offset, 0, len(slots))
		var off uint64
		for _, slot := range slots {
			size := slot.Kind.SlotSize()
			end := off + size
			r = append(r, offset{off, end})
			off = end
		}
		return r
	},

	"offsetEnd": func(offsets []offset) uint64 {
		if len(offsets) == 0 {
			return 0
		}
		return offsets[len(offsets)-1].Stop
	},
}

func tmpl(a asset) *template.Template {
	t := template.New(a.Name)
	t.Funcs(genFuncMap)
	return template.Must(t.Parse(a.Content))
}

type genData struct {
	Package string
	Schema  *SchemaV1
}

func (*genData) Warning() string {
	// not this file, the one we're about to generate; hiding this
	// from grep
	return `This file is automatically generated, DO ` + `NOT` + ` EDIT`
}

type offset struct {
	Start, Stop uint64
}

type genSlot struct {
	Name       string
	ReturnType string
	Start      uint64
	Stop       uint64
}

type genMessage struct {
	Slots []genSlot
}
